/*
Takagi-Sugeno cruise control for car with active forces on it
(c) Sergey Staroletov
*/

\functions {
}

\predicates {
}

\programVariables {
    /* state variable declarations */
  R t;
  R dt;  
  R fin;  
  R m;
  R sigma;  
  R g;
  R k;
  R he;
  R we;
  R f0;
  R f;
  R v0;        
  R speedR;  
  R v;
  R a;
  R vold;
  R sin_angle;  
  R Pj;  
  R Pi;
  R Pw;
  R Pf;
  R F;
  R SpeedError;
  R SpeedErrorDot;  
  R FSpeedErrorSlower;
  R FSpeedErrorZero;
  R FSpeedErrorFaster;
  R FSpeedErrorDotSlower;
  R FSpeedErrorDotZero;
  R FSpeedErrorDotFaster;
  R ruleWeights0;
  R ruleWeights1;
  R ruleWeights2;
  R ruleWeights3;
  R ruleWeights4;
  R ruleWeights5;
  R ruleWeights6;
  R ruleWeights7;
  R ruleWeights8;
  R zeroResult;
  R fasterResult;
  R slowerResult;
  R funcResult;
  R numerator;
  R denomerator;
  R result;
  R x1, x2, x3;
}

\problem {      
      /* initial state characterization */
  
   dt = 0.1 & v0 = 49 & speedR = 50	
  ->
     \[                    /* system dynamics */
	
    v:=v0;
    a:=0;
    /* control */

    SpeedError := v - speedR;
    SpeedErrorDot := 0;  

    /*Fuzzification step*/ 

    /*FSpeedErrorSlower := TriangleGetValue(-35.0, -20.0, -5.0, SpeedError);*/
    
    FSpeedErrorSlower := 0;
    x1 := -35.0;
    x2 := -20.0;
    x3 := -5.0; 
    if (SpeedError = x1 & SpeedError = x2) then
        FSpeedErrorSlower := 1.0
     else if (SpeedError = x2 & SpeedError = x3) then
         FSpeedErrorSlower := 1.0
     else if (SpeedError <= x1 | SpeedError >= x3) then
         FSpeedErrorSlower := 0
     else if (SpeedError = x2) then 
         FSpeedErrorSlower := 1
     else if ((SpeedError > x1) & (SpeedError < x2)) then 
         FSpeedErrorSlower := (SpeedError / (x2 - x1)) - (x1 / (x2 - x1))
     else 
         FSpeedErrorSlower := (-SpeedError / (x3 - x2)) + (x3 / (x3 - x2))
    fi fi fi fi fi;
    
    /*FSpeedErrorZero := TriangleGetValue(-15.0, -0.0, 15.0, SpeedError); */

    
    FSpeedErrorZero := 0;
    x1 := -15.0;
    x2 := -0.0;
    x3 := 15.0; 
    if (SpeedError = x1 & SpeedError = x2) then
        FSpeedErrorZero := 1.0
     else if (SpeedError = x2 & SpeedError = x3) then
         FSpeedErrorZero := 1.0
     else if (SpeedError <= x1 | SpeedError >= x3) then
         FSpeedErrorZero := 0
     else if (SpeedError = x2) then 
         FSpeedErrorZero := 1
     else if ((SpeedError > x1) & (SpeedError < x2)) then 
         FSpeedErrorZero := (SpeedError / (x2 - x1)) - (x1 / (x2 - x1))
     else 
         FSpeedErrorZero := (-SpeedError / (x3 - x2)) + (x3 / (x3 - x2))
    fi fi fi fi fi;
    

    /*FSpeedErrorFaster := TriangleGetValue(5.0, 20.0, 35.0, SpeedError);*/
    
    FSpeedErrorFaster := 0;
    x1 := 5.0;
    x2 := 20.0;
    x3 := 35.0; 
    if (SpeedError = x1 & SpeedError = x2) then
        FSpeedErrorFaster := 1.0
     else if (SpeedError = x2 & SpeedError = x3) then
         FSpeedErrorFaster := 1.0
     else if (SpeedError <= x1 | SpeedError >= x3) then
         FSpeedErrorFaster := 0
     else if (SpeedError = x2) then 
         FSpeedErrorFaster := 1
     else if ((SpeedError > x1) & (SpeedError < x2)) then 
         FSpeedErrorFaster := (SpeedError / (x2 - x1)) - (x1 / (x2 - x1))
     else 
         FSpeedErrorFaster := (-SpeedError / (x3 - x2)) + (x3 / (x3 - x2))
    fi fi fi fi fi;
    

    /*FSpeedErrorDotSlower :=TriangleGetValue(-9.0, -5.0, -1.0, SpeedErrorDot);*/
    
    FSpeedErrorDotSlower := 0;
    x1 := -9.0;
    x2 := -5.0;
    x3 := -1.0; 
    if (SpeedErrorDot = x1 & SpeedErrorDot = x2) then
        FSpeedErrorDotSlower := 1.0
     else if (SpeedErrorDot = x2 & SpeedErrorDot = x3) then
         FSpeedErrorDotSlower := 1.0
     else if (SpeedErrorDot <= x1 | SpeedErrorDot >= x3) then
         FSpeedErrorDotSlower := 0
     else if (SpeedErrorDot = x2) then 
         FSpeedErrorDotSlower := 1
     else if ((SpeedErrorDot > x1) & (SpeedErrorDot < x2)) then 
         FSpeedErrorDotSlower := (SpeedErrorDot / (x2 - x1)) - (x1 / (x2 - x1))
     else 
         FSpeedErrorDotSlower := (-SpeedErrorDot / (x3 - x2)) + (x3 / (x3 - x2))
    fi fi fi fi fi;
    

    /*FSpeedErrorDotZero := TriangleGetValue(-4.0, -0.0, 4.0, SpeedErrorDot);*/
    
    FSpeedErrorDotZero := 0;
    x1 := -4.0;
    x2 := -0.0;
    x3 := 4.0; 
    if (SpeedErrorDot = x1 & SpeedErrorDot = x2) then
        FSpeedErrorDotZero := 1.0
     else if (SpeedErrorDot = x2 & SpeedErrorDot = x3) then
         FSpeedErrorDotZero := 1.0
     else if (SpeedErrorDot <= x1 | SpeedErrorDot >= x3) then
         FSpeedErrorDotZero := 0
     else if (SpeedErrorDot = x2) then 
         FSpeedErrorDotZero := 1
     else if ((SpeedErrorDot > x1) & (SpeedErrorDot < x2)) then 
         FSpeedErrorDotZero := (SpeedErrorDot / (x2 - x1)) - (x1 / (x2 - x1))
     else 
         FSpeedErrorDotZero := (-SpeedErrorDot / (x3 - x2)) + (x3 / (x3 - x2))
    fi fi fi fi fi;
    

    /*FSpeedErrorDotFaster :=TriangleGetValue(5.0, 20.0, 35.0, SpeedErrorDot);*/
    
    FSpeedErrorDotFaster := 0;
    x1 := 5.0;
    x2 := 20.0;
    x3 := 35.0; 
    if (SpeedErrorDot = x1 & SpeedErrorDot = x2) then
        FSpeedErrorDotFaster := 1.0
     else if (SpeedErrorDot = x2 & SpeedErrorDot = x3) then
         FSpeedErrorDotFaster := 1.0
     else if (SpeedErrorDot <= x1 | SpeedErrorDot >= x3) then
         FSpeedErrorDotFaster := 0
     else if (SpeedErrorDot = x2) then 
         FSpeedErrorDotFaster := 1
     else if ((SpeedErrorDot > x1) & (SpeedErrorDot < x2)) then 
         FSpeedErrorDotFaster := (SpeedErrorDot / (x2 - x1)) - (x1 / (x2 - x1))
     else 
         FSpeedErrorDotFaster := (-SpeedErrorDot / (x3 - x2)) + (x3 / (x3 - x2))
    fi fi fi fi fi;
    

    /*Evaluate the conditions 
    ruleWeights0 := min(FSpeedErrorSlower,FSpeedErrorDotSlower);*/
    if (FSpeedErrorDotSlower < ruleWeights0) then
        ruleWeights0 := FSpeedErrorDotSlower
    fi;

    ruleWeights1 := FSpeedErrorSlower;
    if (FSpeedErrorDotZero < ruleWeights1) then
        ruleWeights1 := FSpeedErrorDotZero
    fi;

    ruleWeights2 := FSpeedErrorSlower;
    if (FSpeedErrorDotFaster < ruleWeights2) then
        ruleWeights2 := FSpeedErrorDotFaster
    fi;

    ruleWeights3 := FSpeedErrorZero;
    if (FSpeedErrorDotSlower < ruleWeights3) then
        ruleWeights3 := FSpeedErrorDotSlower
    fi;

    ruleWeights4 := FSpeedErrorZero;
    if (FSpeedErrorDotZero < ruleWeights4) then
        ruleWeights4 := FSpeedErrorDotZero
    fi;

    ruleWeights5 := FSpeedErrorZero;
    if (FSpeedErrorDotFaster < ruleWeights5) then
        ruleWeights5 := FSpeedErrorDotFaster
    fi;

    ruleWeights6 := FSpeedErrorFaster;
    if (FSpeedErrorDotSlower < ruleWeights6) then
        ruleWeights6 := FSpeedErrorDotSlower
    fi;

    ruleWeights7 := FSpeedErrorFaster;
    if (FSpeedErrorDotZero < ruleWeights7) then
        ruleWeights7 := FSpeedErrorDotZero
    fi;

    ruleWeights8 := FSpeedErrorFaster;
    if (FSpeedErrorDotFaster < ruleWeights8) then
        ruleWeights8 := FSpeedErrorDotFaster
    fi;

/*
    ruleWeights0 := Min(FSpeedErrorSlower, FSpeedErrorDotSlower);
    ruleWeights1 := Min(FSpeedErrorSlower, FSpeedErrorDotZero);
    ruleWeights2 := Min(FSpeedErrorSlower, FSpeedErrorDotFaster);
    ruleWeights3 := Min(FSpeedErrorZero, FSpeedErrorDotSlower);
    ruleWeights4 := Min(FSpeedErrorZero, FSpeedErrorDotZero);
    ruleWeights5 := Min(FSpeedErrorZero, FSpeedErrorDotFaster);
    ruleWeights6 := Min(FSpeedErrorFaster, FSpeedErrorDotSlower);
    ruleWeights7 := Min(FSpeedErrorFaster, FSpeedErrorDotZero);
    ruleWeights8 := Min(FSpeedErrorFaster, FSpeedErrorDotFaster);
*/
    /* Functions evaluation  */
    zeroResult := 0 * SpeedError + 0 * SpeedErrorDot + 0;
    fasterResult := 0 * SpeedError + 0 * SpeedErrorDot + 1;
    slowerResult := 0 * SpeedError + 0 * SpeedErrorDot - 1;
    funcResult := -0.04 * SpeedError - 0.1 * SpeedErrorDot + 0;

    /* Combine output */
    numerator := fasterResult * ruleWeights0 + fasterResult * ruleWeights1 +
                 zeroResult * ruleWeights2 + fasterResult * ruleWeights3 +
                 funcResult * ruleWeights4 + slowerResult * ruleWeights5 +
                 zeroResult * ruleWeights6 + slowerResult * ruleWeights7 +
                 slowerResult * ruleWeights8;
    denomerator := ruleWeights0 + ruleWeights1 + ruleWeights2 + ruleWeights3 +
                  ruleWeights4 + ruleWeights5 + ruleWeights6 + ruleWeights7 +
                  ruleWeights8;

    result := 0;
    if (denomerator != 0) then 
        result := numerator / denomerator
    fi;

    if (result > 0) then 
        a := (v * result)
    fi;   

    /* control end */
    v := v + a ;

     \] 
	 (v >= speedR - 5) & (v <= speedR + 5)  
}
